generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         String        @id @default(uuid())
  firstName                  String
  lastName                   String
  username                   String
  email                      String        @unique
  password                   String
  membership                 String
  role                       Role          @default(USER)
  onboarding                 Boolean       @default(false)
  createdAt                  DateTime      @default(now()) @map("created_at")
  updatedAt                  DateTime      @updatedAt @map("updated_at")
  profilePictureUrl          String?
  country                    String[]
  profilePictureCloudinaryId String?
  sponsorsData               SponsorsData?
  activities                 Activity[]
}

model SponsorsData {
  id             String           @id @default(uuid())
  userId         String           @unique
  status         Status
  companyName    String
  description    String
  web            String
  phone          String
  socials        String[]
  logo           String
  bannerWeb      String
  bannerMobile   String
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  specialization String[]
  wppMessage     String?
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  offers         SponsorsOffert[]
  posts          SponsorsPost[]
}

model SponsorsPost {
  id          String       @id @default(uuid())
  sponsorId   String
  status      Status
  title       String
  category    String
  validFrom   DateTime
  validUntil  DateTime?
  description String
  link        String
  imageWeb    String
  imageMobile String
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  sponsor     SponsorsData @relation(fields: [sponsorId], references: [id], onDelete: Cascade)
}

model SponsorsOffert {
  id          String       @id @default(uuid())
  sponsorId   String
  status      Status
  title       String
  discount    String
  validFrom   DateTime
  validUntil  DateTime
  description String
  time        String
  place       String
  intendedFor String
  link        String
  image       String
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  sponsor     SponsorsData @relation(fields: [sponsorId], references: [id], onDelete: Cascade)
}

model Activity {
  id           String   @id @default(uuid())
  type         String
  title        String
  description  String
  date         DateTime
  recurrency   String
  time         String[]
  inscriptions String[]
  image        String
  status       String
  link         String
  facilitator  String?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  observation  String?
  users        User[]
}

enum Status {
  ACTIVE
  INACTIVE
  REVISION
  DRAFT
  REJECTED
}

enum Role {
  ADMIN
  USER
  SPONSOR
  EDITOR
}
